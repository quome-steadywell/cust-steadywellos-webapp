#!/bin/bash
# docker_startup.sh - Production version of the startup script for Quome Cloud

# Save log output to a file in /tmp that can be accessed by the web app
LOG_FILE="/tmp/startup_log.txt"

# Start with a fresh log file
echo "=== STARTUP LOG $(date) ===" > "$LOG_FILE"

# Create a symlink in /app for backward compatibility
ln -sf "$LOG_FILE" /app/startup_log.txt 2>/dev/null || true

# Redirect all output to the log file as well as console
exec > >(tee -a "$LOG_FILE") 2>&1

# Exit on any error
set -e

echo "Starting Palliative Care Platform..."

# Set up /tmp directory for writable files
echo "Setting up temporary directory for writable files..."
TMP_DIR="/tmp/pallcare"
# mkdir -p "$TMP_DIR"
# chmod 777 "$TMP_DIR"

# Wait for database to be ready
echo "Waiting for database to be available..."

# Use the direct connection URL for Quome Cloud deployment if available
if [ -n "$PALLCARE_URL" ]; then
  echo "Using Quome Cloud database connection..."
  DB_HOST="pallcare-cluster.databases"
  DB_PORT="5432"
  DB_USER="cust-86880079-c52c-4e5f-9501-101f8a779c66.pallcare"
else
  echo "Using standard database connection..."
  DB_HOST="${POSTGRES_HOST:-db}"
  DB_PORT="${POSTGRES_PORT:-5432}"
  DB_USER="${POSTGRES_USER:-postgres}"
fi

# Try to connect to Postgres for up to 60 seconds (12 tries, 5 seconds each)
RETRIES=12
until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER || [ $RETRIES -eq 0 ]; do
  echo "Waiting for postgres server to be ready, $((RETRIES--)) remaining attempts..."
  sleep 5
done

# Initialize and seed database if in TEST mode
if [ "${DEV_STATE}" = "TEST" ]; then
  echo "DEV_STATE is set to TEST. Setting up test database..."
  
  # Check if backup file exists and copy to /tmp if needed
  ORIGINAL_BACKUP_FILE="/app/data/backup/pallcare_db.sql"
  BACKUP_FILE="/tmp/pallcare_db.sql"
  
  if [ -f "$ORIGINAL_BACKUP_FILE" ]; then
    echo "Copying backup file to tmp directory..."
    cp "$ORIGINAL_BACKUP_FILE" "$BACKUP_FILE"
    echo "Found backup file. Setting up database from backup..."
    
    # Use the direct connection URL for Quome deployment
    echo "Setting up database using Quome Cloud connection..."
    
    # Use the PALLCARE_URL environment variable if available, fall back to constructed URL
    if [ -n "$PALLCARE_URL" ]; then
      # Make sure there are no trailing spaces in the URL
      DB_URL=$(echo "$PALLCARE_URL" | tr -d ' ')
    else
      DB_URL="postgresql://cust-86880079-c52c-4e5f-9501-101f8a779c66.pallcare:ubcgvwXWWOliJ3NzA0lHNmnZQZoToF2r0TQxoP9wEhvkc1swrX6oHQiN9AVdSWdt@pallcare-cluster.databases:5432/pallcare"
    fi
    
    echo "Using database connection: ${DB_URL}"
    
    # The database name should already be in the connection string
    # We need to first create tables and then restore data
    
    # Extract database name from connection URL for clarity
    DB_NAME=$(echo "$DB_URL" | sed -E 's/.*\/([^?]*).*/\1/')
    echo "Using database: $DB_NAME"
    
    # First create the database schema (tables)
    echo "Creating database tables..."
    export DATABASE_URL="$DB_URL"
    export TEMP_DIR="$TMP_DIR"
    export PYTHONUNBUFFERED=1
    
    # Create the tables before restoring data
    # Using python run.py directly which contains these custom commands
    python /app/run.py create_db
    
    # Connect to the main database and restore data from backup
    echo "Restoring data from backup file..."
    PGPASSWORD="ubcgvwXWWOliJ3NzA0lHNmnZQZoToF2r0TQxoP9wEhvkc1swrX6oHQiN9AVdSWdt" psql "$DB_URL" -f "$BACKUP_FILE"
    
    echo "Database restored from backup successfully!"
    
    # Check if tables were properly created
    echo "Verifying database tables exist..."
    TABLE_CHECK=$(PGPASSWORD="ubcgvwXWWOliJ3NzA0lHNmnZQZoToF2r0TQxoP9wEhvkc1swrX6oHQiN9AVdSWdt" psql "$DB_URL" -c "\dt" | grep -c "patients")
    if [ "$TABLE_CHECK" -eq 0 ]; then
        echo "Warning: Tables not found after restore, creating them now..."
        python /app/run.py create_db
    else
        echo "âœ… Database tables verified"
    fi
    
    # Check and ensure assessment data is correctly set up after restore
    echo "Checking and ensuring assessment data..."
    # Set TEMP_DIR for any application temp files
    export TEMP_DIR="$TMP_DIR"
    export PYTHONUNBUFFERED=1
    python scripts/check_assessments_data.py
  else
    echo "Backup file not found. Using default initialization and seeding..."
    
    # Set database URL and temporary directory for Python scripts
    if [ -n "$PALLCARE_URL" ]; then
      echo "Using Quome Cloud database connection for initialization..."
      # Clean up URL by removing any spaces
      CLEANED_URL=$(echo "$PALLCARE_URL" | tr -d ' ')
      export DATABASE_URL="$CLEANED_URL"
      echo "Database URL set to: $DATABASE_URL"
    else
      export DATABASE_URL="postgresql://cust-86880079-c52c-4e5f-9501-101f8a779c66.pallcare:ubcgvwXWWOliJ3NzA0lHNmnZQZoToF2r0TQxoP9wEhvkc1swrX6oHQiN9AVdSWdt@pallcare-cluster.databases:5432/pallcare"
      echo "Using default Database URL: $DATABASE_URL"
    fi
    
    # Set temp directory for application
    export TEMP_DIR="$TMP_DIR"
    export PYTHONUNBUFFERED=1
    
    # Initialize the database
    echo "Initializing database tables..."
    python /app/run.py create_db
    
    # Initialize protocols before seeding
    echo "Initializing protocols..."
    python /app/scripts/protocol_ingest.py
    
    # Seed the database with test data
    echo "Seeding database with sample data..."
    python /app/run.py seed_db
  fi
  
  echo "Database initialization and seeding complete!"
  echo "Default login credentials:"
  echo "  Admin: admin / password123"
  echo "  Nurse: nurse1 / password123"
  echo "  Physician: physician / password123"
else
  echo "DEV_STATE is not set to TEST. Skipping database initialization."
fi

# Set required environment variables for the application
# Set DATABASE_URL if PALLCARE_URL is available
if [ -n "$PALLCARE_URL" ]; then
  echo "Setting DATABASE_URL from PALLCARE_URL for application..."
  # Make sure there are no trailing spaces in the URL
  CLEANED_URL=$(echo "$PALLCARE_URL" | tr -d ' ')
  export DATABASE_URL="$CLEANED_URL"
  echo "Database URL set to: $DATABASE_URL"
else
  # Fallback to hardcoded URL without spaces
  export DATABASE_URL="postgresql://cust-86880079-c52c-4e5f-9501-101f8a779c66.pallcare:ubcgvwXWWOliJ3NzA0lHNmnZQZoToF2r0TQxoP9wEhvkc1swrX6oHQiN9AVdSWdt@pallcare-cluster.databases:5432/pallcare"
  echo "Using default Database URL: $DATABASE_URL"
fi

# Always set temp directory for application
export TEMP_DIR="$TMP_DIR"
export PYTHONUNBUFFERED=1

# Make sure app knows to save files to /tmp
echo "Setting application to use /tmp for all writable files"

# Start the application
echo "Starting Gunicorn server..."
exec gunicorn --bind 0.0.0.0:5000 --workers 4 run:app
